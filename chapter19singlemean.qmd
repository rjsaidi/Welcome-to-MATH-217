---
title: "Chapter 19 notes - single mean"
author: "R Saidi"
format: docx
editor: visual
---

## Load the libraries and dataset

```{r}
#| message: false
#| warning: false
library(tidyverse)
library(openintro)
library(tidymodels)
```

## T test

Use the Cherry Blossom dataset from 2017

```{r}
library(openintro)
data("run17")
```


```{r}
unique(run17$event)
```


## Mutate the variable net_sec to convert to minutes

First, filter out for 5K event times 

```{r}
run17_1 <- run17 |>
  filter(event != "5K") |>
  mutate(minutes = net_sec/60) 
head(run17_1)
```

## Generate a sample of size 100 from the population

```{r}
# create a vector of size 100 for minutes from 2017
run17_samp <- sample(run17_1$minutes, size = 100, replace = FALSE)
summary(run17_samp)
```

## Perform the t test comparing the mean for 2017 to the mean from 2006

The mean from 2006 was 93.29 minutes

Here is the format for the single mean t test

t.test(x, mu = 0, alternative = "two.sided") t.test(x, mu = 0, alternative = "less") t.test(x, mu = 0, alternative = "greater")

```{r}
# compare the mean from the samples from 2017 to the mean in 2006
t.test(run17_samp, mu = 93.29, alternative = "two.sided")
```

*t = 2.1057, df = 99, p-value = 0.03776*

*Reject the null. There is compelling evidence that the mean in 2017 is different from the mean in 2006.*


## 95% CI mean finishings times in 2017 using tidymodels

create a bootstrap ci

```{r}
boot_dist <- run17_1 |>
  specify(response = minutes) |>
  generate(reps = 1000, type = "bootstrap")|>
  calculate(stat = "mean")
head(boot_dist)
```

```{r}
ci <- get_ci(boot_dist, level = .95)
ci
```

*We are 95% confident that the true mean finishing time for the 10K Cherry Blossom race in 2017 is between 97.559 and 98.060 minutes.*

## Now work with the Ames, IA home sale price variable in ames dataset

```{r}
data("ames")
head(ames)
```


## There are 74 variables about house sale characteristics

## Summarize sale price variable

```{r}
#options(scipen=999)  # converts from scientific to standard
summary(ames$Sale_Price)
hist(ames$Sale_Price)
```

## Generate a sample of size 100 from the data

Use the samp_price data for future calculations

```{r}
samp_price <- sample_n(ames, size = 100, replace = FALSE)
head(samp_price)
```


## The simple code to create a 95% CI for single mean

Use t.test(). You must indicate the variable of interest

```{r}
t.test(samp_price$Sale_Price, conf.level = .95)  # defaults to null = 0
```

*We are 95% confident that the mean sale price for homes in Ames is between $155,019 and $184,587.7.*

##Answer the question:

Test to determine if the mean home sale price in Ames was different from the national average at that time from 2006-2010.

The average home price in the US in 2010 was $222,900.

Ho: The mean home sale price in Ames, IA is the same as national average.
Ha:  """"" is different from """

```{r}
t.test(samp_price$Sale_Price, mu=222900)
```

*The p-value is very small. We reject the null. There is very strong evidence that the true mean home sale price in Ames, IA in 2010 is different from the national home sale price of $222,900.*



*We are 95% confident that the true median home sale price in Ames is between $156716.1	and $184598.2	*


## Perform the hypothesis test using tidymodels

Answer the question: Test to determine if the mean home sale price in Ames was different from the national average at that time from 2006-2010.

The average home price in the US in 2010 was \$222,900.

## Calculate the observed mean

```{r}
# Calculate observed mean
price_mean_obs <- samp_price |>
  # Summarize to calculate the mean observed sale price
  summarize(mean_price = mean(Sale_Price)) 
price_mean_obs
```

## Use "specify", "hypothesize", "generate" and "calculate"

```{r}
sale_mean_ht <- samp_price |>
  # Specify sale_price as the response
  specify(response = Sale_Price) |>
  # Set the hypothesis that national home price is 222900
  hypothesize(null = "point", mu = 222900) |> 
  # Generate 10000 bootstrap replicates
  generate(reps = 1000, type = "bootstrap") |> 
  # Calculate the mean
  calculate(stat = "mean")
head(sale_mean_ht)
```

## Calculate the p-value

*The p-value is 0. Reject the null. The mean sale price of homes in Ames is different (and much less than) the national home price in 2010.*

```{r}
pvalue <- get_p_value(sale_mean_ht, price_mean_obs, "two-sided")
pvalue
```

*The p-value is 0. Reject the null. The mean sale price of homes in Ames is different (and much less than) the national home price in 2010.*

```{r}
sale_mean_ht |>
  visualize() +
  shade_p_value(obs_stat = price_mean_obs, direction = "two-sided")
```


*We can see that the 95% CI is (177902, 183690).*



## Now using tidymodels code for a 95% CI for the ames house prices.

This is a two-part exercise: First, generate 15000 bootstrap distributions of sale_price in the ames data frame and record the median of each bootstrap distribution.

• Specify that sale_price is the response variable. • Generate 15000 bootstrap replicates. • Calculate the median of each distribution.

```{r}
# Generate bootstrap distribution of means
sale_mean_ci <- samp_price |>
  # Specify the variable of interest
  specify(response = Sale_Price) |>  
  # Generate 10000 bootstrap samples
  generate(reps = 1000, type = "bootstrap") |>
  # Calculate the mean of each bootstrap sample
  calculate(stat = "mean")   # change this to "median" to see how this changes
  
# Take a peek
head(sale_mean_ci)
```

## Plot a histogram of the boostrap replications

Look at the shape of the distribution

```{r}
# Plot the sale_mean_ci statistic
ggplot(sale_mean_ci, aes(x = stat)) +
  # Make it a histogram with a binwidth of 500
  geom_histogram(binwidth = 500)
```

## Calculate the 95% CI using the percentile method

```{r}
# Calculate the 95% CI via percentile method
sale_mean_ci |>
  summarize(
    l = quantile(stat, 0.025),
    u = quantile(stat, 0.975)
  )
```

```{r}
sale_ci <- get_ci(sale_mean_ci, level=.95)
sale_ci
```

```{r}
sale_mean_ci %>%
  visualize() +
  shade_confidence_interval(endpoints = sale_ci, level=.95)
```
